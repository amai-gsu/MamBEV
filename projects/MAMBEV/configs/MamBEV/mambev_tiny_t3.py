custom_hooks = [
    dict(begin_iter=100, type="EMAHook"),
]
custom_imports = dict(
    allow_failed_imports=False,
    imports=[
        "projects.MAMBEV.mambev",
        "projects.PETR.petr",
        "projects.mmcv_dep",
        "projects.DETR3D.detr3d",
        "projects.DETR_dep.detr",
        "projects.BEVFormer.bevformer",
    ],
)
default_hooks = dict(
    checkpoint=dict(
        interval=1, max_keep_ckpts=5, save_last=True, type="CheckpointHook"
    ),
    logger=dict(interval=12, type="LoggerHook"),
)
default_scope = "mmdet3d"
file_client_args = dict(backend="local")
launcher = "pytorch"
model = dict(
    embed_dim=256,
    frames=[
        -2,
        -1,
        0,
    ],
    img_backbone=dict(
        depth=50,
        frozen_stages=1,
        init_cfg=dict(
            checkpoint="ckpts/fcos_r50_coco_2mmdet.pth",
            prefix="img_backbone",
            type="Pretrained",
        ),
        norm_cfg=dict(type="SyncBN"),
        norm_eval=False,
        num_stages=4,
        out_indices=[
            3,
        ],
        style="caffe",
        type="mmdet.ResNet",
    ),
    img_neck=dict(
        add_extra_convs="on_output",
        in_channels=[
            2048,
        ],
        num_outs=1,
        out_channels=256,
        relu_before_extra_convs=True,
        start_level=0,
        type="mmdet.FPN",
    ),
    num_levels=1,
    num_mono_levels=0,
    pts_bbox_head=dict(
        as_two_stage=False,
        bbox_coder=dict(
            max_num=300,
            num_classes=10,
            pc_range=[
                -51.2,
                -51.2,
                -5.0,
                51.2,
                51.2,
                3.0,
            ],
            post_center_range=[
                -61.2,
                -61.2,
                -10.0,
                61.2,
                61.2,
                10.0,
            ],
            type="mmdet3d.NMSFreeCoder",
            voxel_size=[
                2.048,
                2.048,
                8,
            ],
        ),
        bev_h=50,
        bev_w=50,
        encoder_self_attn=True,
        group_detr=11,
        in_channels=256,
        loss_bbox=dict(beta=1.0, loss_weight=0.5, type="mmdet.SmoothL1Loss"),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=2.0,
            type="mmdet.FocalLoss",
            use_sigmoid=True,
        ),
        loss_iou=dict(loss_weight=0.0, type="mmdet.GIoULoss"),
        num_classes=10,
        num_query=900,
        positional_encoding=dict(
            col_num_embed=50,
            num_feats=128,
            row_num_embed=50,
            type="mmdet.LearnedPositionalEncoding",
        ),
        sync_cls_avg_factor=True,
        transformer=dict(
            decoder=dict(
                num_layers=6,
                return_intermediate=True,
                transformerlayers=dict(
                    cross_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.1,
                        embed_dims=256,
                        im2col_step=64,
                        num_heads=8,
                        num_levels=1,
                        num_points=4,
                        value_proj_ratio=1.0,
                    ),
                    ffn_cfg=dict(
                        act_cfg=dict(inplace=True, type="ReLU"),
                        embed_dims=256,
                        feedforward_channels=512,
                        ffn_drop=0.1,
                        num_fcs=2,
                    ),
                    self_attn_cfg=dict(
                        batch_first=True,
                        dropout=0.1,
                        embed_dims=256,
                        group=11,
                        num_heads=8,
                    ),
                    type="GroupDeformableDetrTransformerDecoderLayer",
                ),
                type="DetectionTransformerDecoder",
            ),
            embed_dims=256,
            encoder=dict(
                num_layers=2,
                num_points_in_pillar=4,
                pc_range=[
                    -51.2,
                    -51.2,
                    -5.0,
                    51.2,
                    51.2,
                    3.0,
                ],
                return_intermediate=False,
                transformerlayers=dict(
                    attn_cfgs=[
                        dict(
                            A_init_range=(
                                1,
                                16,
                            ),
                            D_has_hdim=False,
                            bias=False,
                            chunk_size=32,
                            conv_bias=True,
                            conv_init=None,
                            d_conv=7,
                            d_model=256,
                            d_ssm=None,
                            d_state=32,
                            dropout=0.1,
                            dt_init_floor=0.0001,
                            dt_limit=(
                                0.0,
                                float("inf"),
                            ),
                            dt_max=0.1,
                            dt_min=0.001,
                            expand=1,
                            headdim=16,
                            ngroups=1,
                            norm_before_gate=False,
                            rmsnorm=True,
                            sequence_parallel=True,
                            ###
                            # type="PrePostHydraBlock",
                            # mem_eff_inference=True,
                            # average_slots=True,
                            # use_post_norm=True,
                            # q_zero_params={"dt": True},
                            # v_zero_params={"z": True},
                            # dt_bias=False,
                            # x_og_activation=False,
                            ####
                            # type="BatchPostPreHydraBlockV2",
                            # average_slots=True,
                            # use_post_norm=True,
                            # q_zero_params={"dt": True},
                            # v_zero_params={"z": True},
                            # dt_bias=False,
                            # x_og_activation=False,
                            ###
                            # type="FastSlotsHydraBlock",
                            # mem_eff_inference=True,
                            # average_slots=True,
                            # use_post_norm=True,
                            # q_zero_params={"dt": True},
                            # v_zero_params={"z": True},
                            # dt_bias=False,
                            ###
                        ),
                        dict(
                            embed_dims=256,
                            mamba_cfg=dict(
                                d_conv=7,
                                d_model=256,
                                d_state=128,
                                expand=4,
                                headdim=128,
                                ngroups=1,
                                type="Hydra",
                            ),
                            type="DummyResidualSelfAttnLayer",
                            use_layer_norm=True,
                        ),
                        dict(
                            batch_first=True,
                            deformable_attention=dict(
                                embed_dims=256,
                                im2col_step=96,
                                num_levels=1,
                                num_points=4,
                                type="MSDeformableAttention3D",
                            ),
                            embed_dims=256,
                            pc_range=[
                                -51.2,
                                -51.2,
                                -5.0,
                                51.2,
                                51.2,
                                3.0,
                            ],
                            type="SpatialCrossAttention",
                        ),
                    ],
                    batch_first=True,
                    feedforward_channels=512,
                    ffn_dropout=0.1,
                    operation_order=[
                        "cross_attn",
                        "mamba_self_attn",
                        "cross_attn",
                        "norm",
                    ],
                    type="BEVFormerLayerV3",
                ),
                type="BEVFormerEncoderV3",
            ),
            frames=[
                -2,
                -1,
                0,
            ],
            num_cams=6,
            num_feature_levels=1,
            num_fusion=3,
            type="PerceptionTransformerV3",
            use_cams_embeds=True,
        ),
        type="BEVFormerHead_GroupDETRV3",
        with_box_refine=True,
    ),
    train_cfg=dict(
        pts=dict(
            assigner=dict(
                cls_cost=dict(type="mmdet.FocalLossCost", weight=2.0),
                iou_cost=dict(type="mmdet.IoUCost", weight=0.0),
                pc_range=[
                    -51.2,
                    -51.2,
                    -5.0,
                    51.2,
                    51.2,
                    3.0,
                ],
                reg_cost=dict(type="mmdet3d.SmoothL1Cost", weight=0.75),
                type="mmdet3d.HungarianAssigner3D",
            ),
            grid_size=[
                512,
                512,
                1,
            ],
            out_size_factor=4,
            point_cloud_range=[
                -51.2,
                -51.2,
                -5.0,
                51.2,
                51.2,
                3.0,
            ],
            voxel_size=[
                2.048,
                2.048,
                8,
            ],
        )
    ),
    type="MamBEV",
    use_grid_mask=True,
    with_bptt=False,
)
model_wrapper_cfg = dict(find_unused_parameters=True, type="MMDistributedDataParallel")
optim_wrapper = dict(
    accumulative_counts=1,
    clip_grad=dict(error_if_nonfinite=True, max_norm=35, norm_type=2, type="norm"),
    loss_scale=512.0,
    optimizer=dict(lr=0.0008, type="AdamW", weight_decay=0.01),
    paramwise_cfg=dict(
        custom_keys=dict(
            A_log=dict(decay_mult=0.0),
            D=dict(decay_mult=0.0),
            dt_bias=dict(decay_mult=0.0),
            img_backbone=dict(lr_mult=0.1),
            sampling_offsets=dict(lr_mult=0.1),
        )
    ),
    type="AmpOptimWrapper",
)
optimizer = dict(lr=0.0008, type="AdamW", weight_decay=0.01)

param_scheduler = [
    dict(by_epoch=False, end=2637, start_factor=0.3333333333333333, type="LinearLR"),
    dict(
        begin=3, by_epoch=True, eta_min=8.000000000000001e-07, type="CosineAnnealingLR"
    ),
]

randomness = dict(seed=0)
test_cfg = dict(type="TestLoop")
test_dataloader = dict(
    batch_size=1,
    collate_fn=dict(type="default_collate"),
    dataset=dict(
        ann_file="nuscenes_infos_temporal_val.pkl",
        backend_args=None,
        box_type_3d="LiDAR",
        data_prefix=dict(
            CAM_BACK="samples/CAM_BACK",
            CAM_BACK_LEFT="samples/CAM_BACK_LEFT",
            CAM_BACK_RIGHT="samples/CAM_BACK_RIGHT",
            CAM_FRONT="samples/CAM_FRONT",
            CAM_FRONT_LEFT="samples/CAM_FRONT_LEFT",
            CAM_FRONT_RIGHT="samples/CAM_FRONT_RIGHT",
            pts="samples/LIDAR_TOP",
        ),
        data_root="data/nuscenes/",
        frames=[
            -2,
            -1,
            0,
        ],
        load_type="frame_based",
        metainfo=dict(
            classes=[
                "car",
                "truck",
                "construction_vehicle",
                "bus",
                "trailer",
                "barrier",
                "motorcycle",
                "bicycle",
                "pedestrian",
                "traffic_cone",
            ]
        ),
        modality=dict(
            use_camera=True,
            use_external=True,
            use_lidar=False,
            use_map=False,
            use_radar=False,
        ),
        pipeline=[
            dict(to_float32=True, type="mmdet3d.LoadMultiViewImageFromFiles"),
            dict(
                mean=[
                    103.53,
                    116.28,
                    123.675,
                ],
                std=[
                    1.0,
                    1.0,
                    1.0,
                ],
                to_rgb=False,
                type="NormalizeMultiviewImage",
            ),
            dict(size_divisor=32, type="PadMultiViewImage"),
            dict(
                flip=False,
                img_scale=(
                    1600,
                    900,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        scales=[
                            0.5,
                        ],
                        type="RandomScaleImageMultiViewImage",
                    ),
                    dict(size_divisor=32, type="PadMultiViewImage"),
                    dict(
                        keys=[
                            "gt_bboxes_3d",
                            "gt_labels_3d",
                            "img",
                        ],
                        meta_keys=(
                            "ego2global",
                            "lidar2ego",
                            "lidar2img",
                            "lidar2cam",
                            "cam2img",
                            "axis_align_matrix",
                            "mono_input_dict",
                            "mono_ann_idx",
                            "sample_idx",
                            "frame_idx",
                            "scene_token",
                            "aug_param",
                            "box_mode_3d",
                            "box_type_3d",
                            "pad_shape",
                            "ori_shape",
                            "img_shape",
                            "crop_offset",
                            "img_crop_offset",
                            "img_norm_cfg",
                            "resize_img_shape",
                            "scale_factor",
                            "filename",
                            "num_pts_feats",
                            "pts_filename",
                            "timestamp",
                        ),
                        type="mmdet3d.Pack3DDetInputs",
                    ),
                ],
                type="mmdet3d.MultiScaleFlipAug3D",
            ),
        ],
        test_mode=True,
        type="NuScenesDatasetMultiFrame",
        use_valid_flag=True,
    ),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type="DefaultSampler"),
)
test_evaluator = dict(
    ann_file="data/nuscenes/nuscenes_infos_temporal_val.pkl",
    backend_args=None,
    data_root="data/nuscenes/",
    metric="bbox",
    type="mmdet3d.CustomNuScenesMetric",
)
test_pipeline = [
    dict(to_float32=True, type="mmdet3d.LoadMultiViewImageFromFiles"),
    dict(
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        std=[
            1.0,
            1.0,
            1.0,
        ],
        to_rgb=False,
        type="NormalizeMultiviewImage",
    ),
    dict(size_divisor=32, type="PadMultiViewImage"),
    dict(
        flip=False,
        img_scale=(
            1600,
            900,
        ),
        pts_scale_ratio=1,
        transforms=[
            dict(
                scales=[
                    0.5,
                ],
                type="RandomScaleImageMultiViewImage",
            ),
            dict(size_divisor=32, type="PadMultiViewImage"),
            dict(
                keys=[
                    "gt_bboxes_3d",
                    "gt_labels_3d",
                    "img",
                ],
                meta_keys=(
                    "ego2global",
                    "lidar2ego",
                    "lidar2img",
                    "lidar2cam",
                    "cam2img",
                    "axis_align_matrix",
                    "mono_input_dict",
                    "mono_ann_idx",
                    "sample_idx",
                    "frame_idx",
                    "scene_token",
                    "aug_param",
                    "box_mode_3d",
                    "box_type_3d",
                    "pad_shape",
                    "ori_shape",
                    "img_shape",
                    "crop_offset",
                    "img_crop_offset",
                    "img_norm_cfg",
                    "resize_img_shape",
                    "scale_factor",
                    "filename",
                    "num_pts_feats",
                    "pts_filename",
                    "timestamp",
                ),
                type="mmdet3d.Pack3DDetInputs",
            ),
        ],
        type="mmdet3d.MultiScaleFlipAug3D",
    ),
]
total_epochs = 30
total_steps = 843900
train_cfg = dict(max_epochs=30, type="EpochBasedTrainLoop", val_interval=50)
train_dataloader = dict(
    batch_size=4,
    collate_fn=dict(type="default_collate"),
    dataset=dict(
        ann_file="nuscenes_infos_temporal_train.pkl",
        backend_args=None,
        box_type_3d="LiDAR",
        data_prefix=dict(
            CAM_BACK="samples/CAM_BACK",
            CAM_BACK_LEFT="samples/CAM_BACK_LEFT",
            CAM_BACK_RIGHT="samples/CAM_BACK_RIGHT",
            CAM_FRONT="samples/CAM_FRONT",
            CAM_FRONT_LEFT="samples/CAM_FRONT_LEFT",
            CAM_FRONT_RIGHT="samples/CAM_FRONT_RIGHT",
            pts="samples/LIDAR_TOP",
        ),
        data_root="data/nuscenes/",
        frames=[
            -2,
            -1,
            0,
        ],
        load_type="frame_based",
        metainfo=dict(
            classes=[
                "car",
                "truck",
                "construction_vehicle",
                "bus",
                "trailer",
                "barrier",
                "motorcycle",
                "bicycle",
                "pedestrian",
                "traffic_cone",
            ]
        ),
        modality=dict(
            use_camera=True,
            use_external=True,
            use_lidar=False,
            use_map=False,
            use_radar=False,
        ),
        pipeline=[
            dict(to_float32=True, type="mmdet3d.LoadMultiViewImageFromFiles"),
            dict(type="PhotoMetricDistortionMultiViewImage"),
            dict(
                type="mmdet3d.LoadAnnotations3D",
                with_attr_label=False,
                with_bbox_3d=True,
                with_label_3d=True,
            ),
            dict(
                point_cloud_range=[
                    -51.2,
                    -51.2,
                    -5.0,
                    51.2,
                    51.2,
                    3.0,
                ],
                type="mmdet3d.ObjectRangeFilter",
            ),
            dict(
                classes=[
                    "car",
                    "truck",
                    "construction_vehicle",
                    "bus",
                    "trailer",
                    "barrier",
                    "motorcycle",
                    "bicycle",
                    "pedestrian",
                    "traffic_cone",
                ],
                type="mmdet3d.ObjectNameFilter",
            ),
            dict(
                mean=[
                    103.53,
                    116.28,
                    123.675,
                ],
                std=[
                    1.0,
                    1.0,
                    1.0,
                ],
                to_rgb=False,
                type="NormalizeMultiviewImage",
            ),
            dict(
                scales=[
                    0.5,
                ],
                type="RandomScaleImageMultiViewImage",
            ),
            dict(size_divisor=32, type="PadMultiViewImage"),
            dict(
                keys=[
                    "gt_bboxes_3d",
                    "gt_labels_3d",
                    "img",
                ],
                meta_keys=(
                    "ego2global",
                    "lidar2ego",
                    "lidar2img",
                    "lidar2cam",
                    "cam2img",
                    "axis_align_matrix",
                    "mono_input_dict",
                    "mono_ann_idx",
                    "sample_idx",
                    "frame_idx",
                    "scene_token",
                    "aug_param",
                    "box_mode_3d",
                    "box_type_3d",
                    "pad_shape",
                    "ori_shape",
                    "img_shape",
                    "crop_offset",
                    "img_crop_offset",
                    "img_norm_cfg",
                    "resize_img_shape",
                    "scale_factor",
                    "filename",
                    "num_pts_feats",
                    "pts_filename",
                    "timestamp",
                ),
                type="mmdet3d.Pack3DDetInputs",
            ),
        ],
        test_mode=False,
        type="NuScenesDatasetMultiFrame",
        use_valid_flag=True,
    ),
    drop_last=False,
    num_workers=10,
    persistent_workers=True,
    sampler=dict(shuffle=True, type="DefaultSampler"),
)
train_dataset = dict(
    ann_file="nuscenes_infos_temporal_train.pkl",
    backend_args=None,
    box_type_3d="LiDAR",
    data_prefix=dict(
        CAM_BACK="samples/CAM_BACK",
        CAM_BACK_LEFT="samples/CAM_BACK_LEFT",
        CAM_BACK_RIGHT="samples/CAM_BACK_RIGHT",
        CAM_FRONT="samples/CAM_FRONT",
        CAM_FRONT_LEFT="samples/CAM_FRONT_LEFT",
        CAM_FRONT_RIGHT="samples/CAM_FRONT_RIGHT",
        pts="samples/LIDAR_TOP",
    ),
    data_root="data/nuscenes/",
    frames=[
        -2,
        -1,
        0,
    ],
    load_type="frame_based",
    metainfo=dict(
        classes=[
            "car",
            "truck",
            "construction_vehicle",
            "bus",
            "trailer",
            "barrier",
            "motorcycle",
            "bicycle",
            "pedestrian",
            "traffic_cone",
        ]
    ),
    modality=dict(
        use_camera=True,
        use_external=True,
        use_lidar=False,
        use_map=False,
        use_radar=False,
    ),
    pipeline=[
        dict(to_float32=True, type="mmdet3d.LoadMultiViewImageFromFiles"),
        dict(type="PhotoMetricDistortionMultiViewImage"),
        dict(
            type="mmdet3d.LoadAnnotations3D",
            with_attr_label=False,
            with_bbox_3d=True,
            with_label_3d=True,
        ),
        dict(
            point_cloud_range=[
                -51.2,
                -51.2,
                -5.0,
                51.2,
                51.2,
                3.0,
            ],
            type="mmdet3d.ObjectRangeFilter",
        ),
        dict(
            classes=[
                "car",
                "truck",
                "construction_vehicle",
                "bus",
                "trailer",
                "barrier",
                "motorcycle",
                "bicycle",
                "pedestrian",
                "traffic_cone",
            ],
            type="mmdet3d.ObjectNameFilter",
        ),
        dict(
            mean=[
                103.53,
                116.28,
                123.675,
            ],
            std=[
                1.0,
                1.0,
                1.0,
            ],
            to_rgb=False,
            type="NormalizeMultiviewImage",
        ),
        dict(
            scales=[
                0.5,
            ],
            type="RandomScaleImageMultiViewImage",
        ),
        dict(size_divisor=32, type="PadMultiViewImage"),
        dict(
            keys=[
                "gt_bboxes_3d",
                "gt_labels_3d",
                "img",
            ],
            meta_keys=(
                "ego2global",
                "lidar2ego",
                "lidar2img",
                "lidar2cam",
                "cam2img",
                "axis_align_matrix",
                "mono_input_dict",
                "mono_ann_idx",
                "sample_idx",
                "frame_idx",
                "scene_token",
                "aug_param",
                "box_mode_3d",
                "box_type_3d",
                "pad_shape",
                "ori_shape",
                "img_shape",
                "crop_offset",
                "img_crop_offset",
                "img_norm_cfg",
                "resize_img_shape",
                "scale_factor",
                "filename",
                "num_pts_feats",
                "pts_filename",
                "timestamp",
            ),
            type="mmdet3d.Pack3DDetInputs",
        ),
    ],
    test_mode=False,
    type="NuScenesDatasetMultiFrame",
    use_valid_flag=True,
)
train_pipeline = [
    dict(to_float32=True, type="mmdet3d.LoadMultiViewImageFromFiles"),
    dict(type="PhotoMetricDistortionMultiViewImage"),
    dict(
        type="mmdet3d.LoadAnnotations3D",
        with_attr_label=False,
        with_bbox_3d=True,
        with_label_3d=True,
    ),
    dict(
        point_cloud_range=[
            -51.2,
            -51.2,
            -5.0,
            51.2,
            51.2,
            3.0,
        ],
        type="mmdet3d.ObjectRangeFilter",
    ),
    dict(
        classes=[
            "car",
            "truck",
            "construction_vehicle",
            "bus",
            "trailer",
            "barrier",
            "motorcycle",
            "bicycle",
            "pedestrian",
            "traffic_cone",
        ],
        type="mmdet3d.ObjectNameFilter",
    ),
    dict(
        mean=[
            103.53,
            116.28,
            123.675,
        ],
        std=[
            1.0,
            1.0,
            1.0,
        ],
        to_rgb=False,
        type="NormalizeMultiviewImage",
    ),
    dict(
        scales=[
            0.5,
        ],
        type="RandomScaleImageMultiViewImage",
    ),
    dict(size_divisor=32, type="PadMultiViewImage"),
    dict(
        keys=[
            "gt_bboxes_3d",
            "gt_labels_3d",
            "img",
        ],
        meta_keys=(
            "ego2global",
            "lidar2ego",
            "lidar2img",
            "lidar2cam",
            "cam2img",
            "axis_align_matrix",
            "mono_input_dict",
            "mono_ann_idx",
            "sample_idx",
            "frame_idx",
            "scene_token",
            "aug_param",
            "box_mode_3d",
            "box_type_3d",
            "pad_shape",
            "ori_shape",
            "img_shape",
            "crop_offset",
            "img_crop_offset",
            "img_norm_cfg",
            "resize_img_shape",
            "scale_factor",
            "filename",
            "num_pts_feats",
            "pts_filename",
            "timestamp",
        ),
        type="mmdet3d.Pack3DDetInputs",
    ),
]

val_cfg = dict(type="ValLoop")
val_dataloader = dict(
    batch_size=1,
    collate_fn=dict(type="default_collate"),
    dataset=dict(
        ann_file="nuscenes_infos_temporal_val.pkl",
        backend_args=None,
        box_type_3d="LiDAR",
        data_prefix=dict(
            CAM_BACK="samples/CAM_BACK",
            CAM_BACK_LEFT="samples/CAM_BACK_LEFT",
            CAM_BACK_RIGHT="samples/CAM_BACK_RIGHT",
            CAM_FRONT="samples/CAM_FRONT",
            CAM_FRONT_LEFT="samples/CAM_FRONT_LEFT",
            CAM_FRONT_RIGHT="samples/CAM_FRONT_RIGHT",
            pts="samples/LIDAR_TOP",
        ),
        data_root="data/nuscenes/",
        frames=[
            -2,
            -1,
            0,
        ],
        load_type="frame_based",
        metainfo=dict(
            classes=[
                "car",
                "truck",
                "construction_vehicle",
                "bus",
                "trailer",
                "barrier",
                "motorcycle",
                "bicycle",
                "pedestrian",
                "traffic_cone",
            ]
        ),
        modality=dict(
            use_camera=True,
            use_external=True,
            use_lidar=False,
            use_map=False,
            use_radar=False,
        ),
        pipeline=[
            dict(to_float32=True, type="mmdet3d.LoadMultiViewImageFromFiles"),
            dict(
                mean=[
                    103.53,
                    116.28,
                    123.675,
                ],
                std=[
                    1.0,
                    1.0,
                    1.0,
                ],
                to_rgb=False,
                type="NormalizeMultiviewImage",
            ),
            dict(size_divisor=32, type="PadMultiViewImage"),
            dict(
                flip=False,
                img_scale=(
                    1600,
                    900,
                ),
                pts_scale_ratio=1,
                transforms=[
                    dict(
                        scales=[
                            0.5,
                        ],
                        type="RandomScaleImageMultiViewImage",
                    ),
                    dict(size_divisor=32, type="PadMultiViewImage"),
                    dict(
                        keys=[
                            "gt_bboxes_3d",
                            "gt_labels_3d",
                            "img",
                        ],
                        meta_keys=(
                            "ego2global",
                            "lidar2ego",
                            "lidar2img",
                            "lidar2cam",
                            "cam2img",
                            "axis_align_matrix",
                            "mono_input_dict",
                            "mono_ann_idx",
                            "sample_idx",
                            "frame_idx",
                            "scene_token",
                            "aug_param",
                            "box_mode_3d",
                            "box_type_3d",
                            "pad_shape",
                            "ori_shape",
                            "img_shape",
                            "crop_offset",
                            "img_crop_offset",
                            "img_norm_cfg",
                            "resize_img_shape",
                            "scale_factor",
                            "filename",
                            "num_pts_feats",
                            "pts_filename",
                            "timestamp",
                        ),
                        type="mmdet3d.Pack3DDetInputs",
                    ),
                ],
                type="mmdet3d.MultiScaleFlipAug3D",
            ),
        ],
        test_mode=True,
        type="NuScenesDatasetMultiFrame",
        use_valid_flag=True,
    ),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type="DefaultSampler"),
)
val_dataset = dict(
    ann_file="nuscenes_infos_temporal_val.pkl",
    backend_args=None,
    box_type_3d="LiDAR",
    data_prefix=dict(
        CAM_BACK="samples/CAM_BACK",
        CAM_BACK_LEFT="samples/CAM_BACK_LEFT",
        CAM_BACK_RIGHT="samples/CAM_BACK_RIGHT",
        CAM_FRONT="samples/CAM_FRONT",
        CAM_FRONT_LEFT="samples/CAM_FRONT_LEFT",
        CAM_FRONT_RIGHT="samples/CAM_FRONT_RIGHT",
        pts="samples/LIDAR_TOP",
    ),
    data_root="data/nuscenes/",
    frames=[
        -2,
        -1,
        0,
    ],
    load_type="frame_based",
    metainfo=dict(
        classes=[
            "car",
            "truck",
            "construction_vehicle",
            "bus",
            "trailer",
            "barrier",
            "motorcycle",
            "bicycle",
            "pedestrian",
            "traffic_cone",
        ]
    ),
    modality=dict(
        use_camera=True,
        use_external=True,
        use_lidar=False,
        use_map=False,
        use_radar=False,
    ),
    pipeline=[
        dict(to_float32=True, type="mmdet3d.LoadMultiViewImageFromFiles"),
        dict(
            mean=[
                103.53,
                116.28,
                123.675,
            ],
            std=[
                1.0,
                1.0,
                1.0,
            ],
            to_rgb=False,
            type="NormalizeMultiviewImage",
        ),
        dict(size_divisor=32, type="PadMultiViewImage"),
        dict(
            flip=False,
            img_scale=(
                1600,
                900,
            ),
            pts_scale_ratio=1,
            transforms=[
                dict(
                    scales=[
                        0.5,
                    ],
                    type="RandomScaleImageMultiViewImage",
                ),
                dict(size_divisor=32, type="PadMultiViewImage"),
                dict(
                    keys=[
                        "gt_bboxes_3d",
                        "gt_labels_3d",
                        "img",
                    ],
                    meta_keys=(
                        "ego2global",
                        "lidar2ego",
                        "lidar2img",
                        "lidar2cam",
                        "cam2img",
                        "axis_align_matrix",
                        "mono_input_dict",
                        "mono_ann_idx",
                        "sample_idx",
                        "frame_idx",
                        "scene_token",
                        "aug_param",
                        "box_mode_3d",
                        "box_type_3d",
                        "pad_shape",
                        "ori_shape",
                        "img_shape",
                        "crop_offset",
                        "img_crop_offset",
                        "img_norm_cfg",
                        "resize_img_shape",
                        "scale_factor",
                        "filename",
                        "num_pts_feats",
                        "pts_filename",
                        "timestamp",
                    ),
                    type="mmdet3d.Pack3DDetInputs",
                ),
            ],
            type="mmdet3d.MultiScaleFlipAug3D",
        ),
    ],
    test_mode=True,
    type="NuScenesDatasetMultiFrame",
    use_valid_flag=True,
)
val_evaluator = dict(
    ann_file="data/nuscenes/nuscenes_infos_temporal_val.pkl",
    backend_args=None,
    data_root="data/nuscenes/",
    metric="bbox",
    type="mmdet3d.CustomNuScenesMetric",
)
visualizer = dict(
    type="Visualizer",
    vis_backends=[
        dict(
            init_kwargs=dict(
                name="Slots Mix Deformable Mamba", project="tools-ICML_BEV"
            ),
            type="WandbVisBackend",
        ),
    ],
)
work_dir = "./work_dirs/mix_hydra_slots_inside_el2_50x50_t3_4trav"
